---
AWSTemplateFormatVersion: 2010-09-09
Description: Spoke VPC for TGW VDSS integration

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Template Version
        Parameters:
          - pTemplateVersion
      - Label:
          default: VPC Config
        Parameters:
          - pVPCName
          - pVPCCidr
          - pVPCTenancy
          - pNumberOfAzs
          - pTgwId
      - Label:
          default: Tagging
        Parameters:
          - pEnvironment
    ParameterLabels:
      pVPCName:
        default: Name of VPC
      pVPCCidr:
        default: VPC CIDR Block
      pVPCTenancy:
        default: Instance Tenancy
      pEnvironment:
        default: Environment
      pTemplateVersion:
        default: CloudFormation Template Version
      pNumberOfAzs:
        default: Number of AZs to use
      pTgwId:
        default: Transit Gateway ID

Parameters:

  pVPCCidr:
    Default: 192.168.0.0/16
    Description: CIDR block for VPC. Example 10.0.0.0/16
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  pVPCName:
    Description: VPC name used for reference
    Type: String

  pVPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: Instance tenancy behavior for this VPC
    Type: String

  pEnvironment:
    Type: String
    Description: value for tag Environment. Values can be Production, Development, QA, or Staging
    AllowedValues:
      - "Production"
      - "Development"
      - "QA"
      - "Staging"
      - "Management"

  pTemplateVersion:
    Type: String
    Default: "1.0.0"
    AllowedValues:
      - "1.0.0"
    ConstraintDescription: Do not change

  pNumberOfAzs:
    Type: String
    Default: "3"
    AllowedValues:
      - "2"
      - "3"

  pTgwId:
    Type: String
    Description: The ID of the transit gateway.

Conditions:
  3AZDeployment: !Equals [!Ref pNumberOfAzs, "3"]

Resources:
  rVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: !Ref pVPCTenancy
      Tags:
      - Key: Name
        Value: !Ref pVPCName

  rRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVpc
      Tags:
      - Key: Name
        Value: !Sub ${pVPCName}-RouteTable

  rSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref rVpc
      CidrBlock: !Select [0, !Cidr [!Ref pVPCCidr, 6, 13]]
      Tags:
        - Key: Name
          Value: !Sub ${pVPCName}-Subnet-A
        - Key: Environment
          Value: !Ref pEnvironment
        - Key: "Template Version"
          Value: !Ref pTemplateVersion

  rAttachrSubnetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTable
      SubnetId: !Ref rSubnetA

  rSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref rVpc
      CidrBlock: !Select [1, !Cidr [!Ref pVPCCidr, 6, 13]]
      Tags:
      - Key: Name
        Value: !Sub ${pVPCName}-Subnet-B
  rAttachSubnetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTable
      SubnetId: !Ref rSubnetB

  rSubnetC:
    Type: AWS::EC2::Subnet
    Condition: 3AZDeployment
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ""]
      VpcId: !Ref rVpc
      CidrBlock: !Select [2, !Cidr [!Ref pVPCCidr, 6, 13]]
      Tags:
      - Key: Name
        Value: !Sub ${pVPCName}-Subnet-C
  rAttachSubnetC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: 3AZDeployment
    Properties:
      RouteTableId: !Ref rRouteTable
      SubnetId: !Ref rSubnetC

  ####################################
  ## STAGED VPC RESOURCES
  ###################################
  ## SSM ENdpoints
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVpc

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: 'Interface'
      VpcId: !Ref rVpc

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  ## ECR API Endpoint for VPC utilization
  rEcrApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  ## ECR DKR Endpoint for VPC utilization
  rEcrDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  ## Secrets Manager Endpoint for VPC utilization
  rSecretsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  ## DataSync Endpoint for VPC utilization
  rDataSyncVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.datasync
      SubnetIds:
        - !Ref rSubnetA
        - !Ref rSubnetB
        - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  ## S3 Endpoint for VPC utilization
  rS3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: "*"
          Resource: "*"
      RouteTableIds:
      - !Ref rRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref rVpc

  ## DynamoDb Endpoint for VPC utilization
  rVPCEndpointDynamoDb:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Statement:
        - Action: '*'
          Effect: Allow
          Principal: '*'
          Resource: '*'
        Version: 2012-10-17
      RouteTableIds:
      - !Ref rRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcId: !Ref rVpc

  ## RDS Subnet Group staged in the 2 created Subnets
  rRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub DBSubnetGroup-${pVPCName}
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
      - !Ref rSubnetA
      - !Ref rSubnetB
      - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      Tags:
      - Key: Name
        Value: !Sub DBSubnetGroup-${pVPCName}

  ## Redshift Subnet Groups staged for 2 created subnets
  rRedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: RedShift Cluster Subnet Group
      SubnetIds:
      - !Ref rSubnetA
      - !Ref rSubnetB
      - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      Tags:
      - Key: Name
        Value: !Sub RedShiftSubnetGroup-${pVPCName}

  ## VPC Flow Logs
  # rFlowLogs:
  #   Type: AWS::EC2::FlowLog
  #   Properties:
  #     ## Deliver flow logs to S3 bucket not requiring aws role
  #     LogDestination: !Sub arn:aws:s3:::csr-adminbucket-${AWS::AccountId}
  #     LogDestinationType: s3
  #     ResourceId: !Ref rVpc
  #     ResourceType: VPC
  #     TrafficType: ALL

  ## Security Group for Interface VPC Endpoint types
  rInterfaceVpcEndpointSG:
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: All outbound allowed from VDSS
          - id: W9
            reason: VDSS internal CIDR ranges allowed
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Interface VPC Endpoint(s)
      VpcId: !Ref rVpc
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pVPCCidr
          Description: Local VPC CIDR

  rApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
      - !Ref rSubnetA
      - !Ref rSubnetB
      - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]
      SecurityGroupIds:
      - !Ref rInterfaceVpcEndpointSG
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      VpcId: !Ref rVpc

  # rTgwAttachment:
  #   Type: AWS::EC2::TransitGatewayAttachment
  #   Properties:
  #     TransitGatewayId: !Ref pTgwId
  #     VpcId: !Ref rVpc
  #     SubnetIds:
  #       - !Ref rSubnetA
  #       - !Ref rSubnetB
  #       - !If [3AZDeployment ,!Ref rSubnetC, !Ref "AWS::NoValue"]

  # ## Route for Transit Gateway
  # rRoute0:
  #   Type: AWS::EC2::Route
  #   DependsOn: rTgwAttachment
  #   Properties:
  #     DestinationCidrBlock: 0.0.0.0/0
  #     TransitGatewayId: !Ref pTgwId
  #     RouteTableId: !Ref rRouteTable

Outputs:
  oVpc:
    Description: VPC ID
    Value: !Ref rVpc
  oRouteTable:
    Value: !Ref rRouteTable
  oSubnetA:
    Value: !Ref rSubnetA
  oSubnetB:
    Value: !Ref rSubnetB
  oSubnetC:
    Value: !If [3AZDeployment , !Ref rSubnetC, "Unused"]
  oRDSSubnetGroup:
    Description: RDSSubnetGroup
    Value: !Ref rRDSSubnetGroup
  # oVpnGateway:
  #   Description: VpnGateway
  #   Value: !Ref rVpnGateway
